// Code generated by protoc-gen-gogo.
// source: dev/storage.proto
// DO NOT EDIT!

/*
	Package dev is a generated protocol buffer package.

	Package dev provides a blueprint for testing the various call semantics provided by Gorums.
	The following table explains the differences in call semantics.

	                   Replies per server      Gorums termination check    # times qfunc can update result     Server-side reply type
	------------------------------------------------------------------------------------------------------------------------------------------------
	Quorum call                 1                   Reply + error count                 1                           Single response
	Correctable QC              1                   Reply + error count                 N                           Single response
	Correctable QC w/prelim     M                   Error count                         M                           Stream of responses

	It is generated from these files:
		dev/storage.proto

	It has these top-level messages:
		State
		MyState
		WriteResponse
		ReadRequest
		Empty
*/
package dev

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/relab/gorums"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type State struct {
	Value     string `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (m *State) Reset()                    { *m = State{} }
func (*State) ProtoMessage()               {}
func (*State) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{0} }

func (m *State) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *State) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type MyState struct {
	Value     string `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Extra     int64  `protobuf:"varint,3,opt,name=Extra,proto3" json:"Extra,omitempty"`
}

func (m *MyState) Reset()                    { *m = MyState{} }
func (*MyState) ProtoMessage()               {}
func (*MyState) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{1} }

func (m *MyState) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *MyState) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MyState) GetExtra() int64 {
	if m != nil {
		return m.Extra
	}
	return 0
}

type WriteResponse struct {
	New bool `protobuf:"varint,1,opt,name=New,proto3" json:"New,omitempty"`
}

func (m *WriteResponse) Reset()                    { *m = WriteResponse{} }
func (*WriteResponse) ProtoMessage()               {}
func (*WriteResponse) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{2} }

func (m *WriteResponse) GetNew() bool {
	if m != nil {
		return m.New
	}
	return false
}

type ReadRequest struct {
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{3} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{4} }

func init() {
	proto.RegisterType((*State)(nil), "dev.State")
	proto.RegisterType((*MyState)(nil), "dev.MyState")
	proto.RegisterType((*WriteResponse)(nil), "dev.WriteResponse")
	proto.RegisterType((*ReadRequest)(nil), "dev.ReadRequest")
	proto.RegisterType((*Empty)(nil), "dev.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Storage service

type StorageClient interface {
	// ReadNoQC is a plain gRPC call.
	ReadNoQC(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*State, error)
	// Read is a synchronous quorum call.
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*State, error)
	// ReadFuture is an asynchronous quorum call that
	// returns a future object for retrieving results.
	ReadFuture(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*State, error)
	// ReadCustomReturn is a synchronous quorum call with a custom return type
	ReadCustomReturn(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*State, error)
	// ReadCorrectable is an asynchronous correctable quorum call that
	// returns a correctable object for retrieving results.
	// TODO update DOC (useful for EPaxos)
	ReadCorrectable(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*State, error)
	// ReadPrelim is an asynchronous correctable quorum call that
	// returns a correctable object for retrieving results.
	// TODO update DOC
	ReadPrelim(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (Storage_ReadPrelimClient, error)
	// Write is a synchronous quorum call.
	// The request argument (State) is passed to the associated
	// quorum function, WriteQF, for this method.
	Write(ctx context.Context, in *State, opts ...grpc.CallOption) (*WriteResponse, error)
	// WriteFuture is an asynchronous quorum call that
	// returns a future object for retrieving results.
	// The request argument (State) is passed to the associated
	// quorum function, WriteFutureQF, for this method.
	WriteFuture(ctx context.Context, in *State, opts ...grpc.CallOption) (*WriteResponse, error)
	// WriteAsync is an asynchronous multicast to all nodes in a configuration.
	// No replies are collected.
	WriteAsync(ctx context.Context, opts ...grpc.CallOption) (Storage_WriteAsyncClient, error)
	// WritePerNode is a synchronous quorum call, where,
	// for each node, a provided function is called to determine
	// the argument to be sent to that node.
	WritePerNode(ctx context.Context, in *State, opts ...grpc.CallOption) (*WriteResponse, error)
}

type storageClient struct {
	cc *grpc.ClientConn
}

func NewStorageClient(cc *grpc.ClientConn) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) ReadNoQC(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := grpc.Invoke(ctx, "/dev.Storage/ReadNoQC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := grpc.Invoke(ctx, "/dev.Storage/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) ReadFuture(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := grpc.Invoke(ctx, "/dev.Storage/ReadFuture", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) ReadCustomReturn(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := grpc.Invoke(ctx, "/dev.Storage/ReadCustomReturn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) ReadCorrectable(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := grpc.Invoke(ctx, "/dev.Storage/ReadCorrectable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) ReadPrelim(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (Storage_ReadPrelimClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Storage_serviceDesc.Streams[0], c.cc, "/dev.Storage/ReadPrelim", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageReadPrelimClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Storage_ReadPrelimClient interface {
	Recv() (*State, error)
	grpc.ClientStream
}

type storageReadPrelimClient struct {
	grpc.ClientStream
}

func (x *storageReadPrelimClient) Recv() (*State, error) {
	m := new(State)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageClient) Write(ctx context.Context, in *State, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := grpc.Invoke(ctx, "/dev.Storage/Write", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) WriteFuture(ctx context.Context, in *State, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := grpc.Invoke(ctx, "/dev.Storage/WriteFuture", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) WriteAsync(ctx context.Context, opts ...grpc.CallOption) (Storage_WriteAsyncClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Storage_serviceDesc.Streams[1], c.cc, "/dev.Storage/WriteAsync", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageWriteAsyncClient{stream}
	return x, nil
}

type Storage_WriteAsyncClient interface {
	Send(*State) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type storageWriteAsyncClient struct {
	grpc.ClientStream
}

func (x *storageWriteAsyncClient) Send(m *State) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storageWriteAsyncClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageClient) WritePerNode(ctx context.Context, in *State, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := grpc.Invoke(ctx, "/dev.Storage/WritePerNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Storage service

type StorageServer interface {
	// ReadNoQC is a plain gRPC call.
	ReadNoQC(context.Context, *ReadRequest) (*State, error)
	// Read is a synchronous quorum call.
	Read(context.Context, *ReadRequest) (*State, error)
	// ReadFuture is an asynchronous quorum call that
	// returns a future object for retrieving results.
	ReadFuture(context.Context, *ReadRequest) (*State, error)
	// ReadCustomReturn is a synchronous quorum call with a custom return type
	ReadCustomReturn(context.Context, *ReadRequest) (*State, error)
	// ReadCorrectable is an asynchronous correctable quorum call that
	// returns a correctable object for retrieving results.
	// TODO update DOC (useful for EPaxos)
	ReadCorrectable(context.Context, *ReadRequest) (*State, error)
	// ReadPrelim is an asynchronous correctable quorum call that
	// returns a correctable object for retrieving results.
	// TODO update DOC
	ReadPrelim(*ReadRequest, Storage_ReadPrelimServer) error
	// Write is a synchronous quorum call.
	// The request argument (State) is passed to the associated
	// quorum function, WriteQF, for this method.
	Write(context.Context, *State) (*WriteResponse, error)
	// WriteFuture is an asynchronous quorum call that
	// returns a future object for retrieving results.
	// The request argument (State) is passed to the associated
	// quorum function, WriteFutureQF, for this method.
	WriteFuture(context.Context, *State) (*WriteResponse, error)
	// WriteAsync is an asynchronous multicast to all nodes in a configuration.
	// No replies are collected.
	WriteAsync(Storage_WriteAsyncServer) error
	// WritePerNode is a synchronous quorum call, where,
	// for each node, a provided function is called to determine
	// the argument to be sent to that node.
	WritePerNode(context.Context, *State) (*WriteResponse, error)
}

func RegisterStorageServer(s *grpc.Server, srv StorageServer) {
	s.RegisterService(&_Storage_serviceDesc, srv)
}

func _Storage_ReadNoQC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).ReadNoQC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.Storage/ReadNoQC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).ReadNoQC(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.Storage/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_ReadFuture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).ReadFuture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.Storage/ReadFuture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).ReadFuture(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_ReadCustomReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).ReadCustomReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.Storage/ReadCustomReturn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).ReadCustomReturn(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_ReadCorrectable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).ReadCorrectable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.Storage/ReadCorrectable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).ReadCorrectable(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_ReadPrelim_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageServer).ReadPrelim(m, &storageReadPrelimServer{stream})
}

type Storage_ReadPrelimServer interface {
	Send(*State) error
	grpc.ServerStream
}

type storageReadPrelimServer struct {
	grpc.ServerStream
}

func (x *storageReadPrelimServer) Send(m *State) error {
	return x.ServerStream.SendMsg(m)
}

func _Storage_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(State)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.Storage/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).Write(ctx, req.(*State))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_WriteFuture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(State)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).WriteFuture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.Storage/WriteFuture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).WriteFuture(ctx, req.(*State))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_WriteAsync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageServer).WriteAsync(&storageWriteAsyncServer{stream})
}

type Storage_WriteAsyncServer interface {
	SendAndClose(*Empty) error
	Recv() (*State, error)
	grpc.ServerStream
}

type storageWriteAsyncServer struct {
	grpc.ServerStream
}

func (x *storageWriteAsyncServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storageWriteAsyncServer) Recv() (*State, error) {
	m := new(State)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Storage_WritePerNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(State)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).WritePerNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.Storage/WritePerNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).WritePerNode(ctx, req.(*State))
	}
	return interceptor(ctx, in, info, handler)
}

var _Storage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dev.Storage",
	HandlerType: (*StorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadNoQC",
			Handler:    _Storage_ReadNoQC_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Storage_Read_Handler,
		},
		{
			MethodName: "ReadFuture",
			Handler:    _Storage_ReadFuture_Handler,
		},
		{
			MethodName: "ReadCustomReturn",
			Handler:    _Storage_ReadCustomReturn_Handler,
		},
		{
			MethodName: "ReadCorrectable",
			Handler:    _Storage_ReadCorrectable_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _Storage_Write_Handler,
		},
		{
			MethodName: "WriteFuture",
			Handler:    _Storage_WriteFuture_Handler,
		},
		{
			MethodName: "WritePerNode",
			Handler:    _Storage_WritePerNode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadPrelim",
			Handler:       _Storage_ReadPrelim_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WriteAsync",
			Handler:       _Storage_WriteAsync_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "dev/storage.proto",
}

func (m *State) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *State) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStorage(dAtA, i, uint64(m.Timestamp))
	}
	return i, nil
}

func (m *MyState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MyState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStorage(dAtA, i, uint64(m.Timestamp))
	}
	if m.Extra != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStorage(dAtA, i, uint64(m.Extra))
	}
	return i, nil
}

func (m *WriteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WriteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.New {
		dAtA[i] = 0x8
		i++
		if m.New {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ReadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeFixed64Storage(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Storage(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintStorage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *State) Size() (n int) {
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovStorage(uint64(m.Timestamp))
	}
	return n
}

func (m *MyState) Size() (n int) {
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovStorage(uint64(m.Timestamp))
	}
	if m.Extra != 0 {
		n += 1 + sovStorage(uint64(m.Extra))
	}
	return n
}

func (m *WriteResponse) Size() (n int) {
	var l int
	_ = l
	if m.New {
		n += 2
	}
	return n
}

func (m *ReadRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Empty) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovStorage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozStorage(x uint64) (n int) {
	return sovStorage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *State) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&State{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MyState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MyState{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`Extra:` + fmt.Sprintf("%v", this.Extra) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WriteResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WriteResponse{`,
		`New:` + fmt.Sprintf("%v", this.New) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReadRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReadRequest{`,
		`}`,
	}, "")
	return s
}
func (this *Empty) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Empty{`,
		`}`,
	}, "")
	return s
}
func valueToStringStorage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *State) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: State: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: State: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MyState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MyState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MyState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			m.Extra = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Extra |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WriteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WriteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WriteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field New", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.New = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStorage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthStorage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStorage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStorage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStorage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStorage   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("dev/storage.proto", fileDescriptorStorage) }

var fileDescriptorStorage = []byte{
	// 445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x3f, 0x6f, 0x13, 0x41,
	0x10, 0xc5, 0x6f, 0xb1, 0x8d, 0x9d, 0x09, 0x51, 0xcc, 0x8a, 0x62, 0x65, 0xa1, 0x55, 0x58, 0xa5,
	0xb0, 0x22, 0x64, 0x87, 0x20, 0x04, 0x12, 0x55, 0x88, 0x42, 0x87, 0x15, 0xce, 0x08, 0xea, 0xb5,
	0x6f, 0x64, 0x2c, 0xf9, 0xbc, 0xc7, 0xfe, 0x31, 0xb8, 0x4b, 0x49, 0x99, 0x06, 0x89, 0x32, 0x25,
	0x25, 0xcd, 0x7d, 0x01, 0x2a, 0xca, 0x94, 0x94, 0xe4, 0x68, 0x28, 0x91, 0xf8, 0x02, 0x68, 0xf7,
	0x02, 0xc4, 0xd5, 0x21, 0xaa, 0x9b, 0xdd, 0xf7, 0x7e, 0x3b, 0xa3, 0x37, 0x3a, 0xb8, 0x9e, 0xe0,
	0xa2, 0x6f, 0xac, 0xd2, 0x72, 0x82, 0xbd, 0x4c, 0x2b, 0xab, 0x68, 0x2d, 0xc1, 0x45, 0x67, 0x7b,
	0x32, 0xb5, 0x2f, 0xdd, 0xa8, 0x37, 0x56, 0x69, 0x5f, 0xe3, 0x4c, 0x8e, 0xfa, 0x13, 0xa5, 0x5d,
	0x6a, 0x2e, 0x3e, 0xa5, 0x55, 0x3c, 0x84, 0xc6, 0xd0, 0x4a, 0x8b, 0xf4, 0x06, 0x34, 0x9e, 0xcb,
	0x99, 0x43, 0x46, 0xb6, 0x48, 0x77, 0x2d, 0x2e, 0x0f, 0xf4, 0x26, 0xac, 0x3d, 0x9b, 0xa6, 0x68,
	0xac, 0x4c, 0x33, 0x76, 0x65, 0x8b, 0x74, 0x6b, 0xf1, 0xdf, 0x0b, 0x31, 0x84, 0xe6, 0x93, 0xe5,
	0x7f, 0xe3, 0x9e, 0x39, 0x7c, 0x63, 0xb5, 0x64, 0xb5, 0xa0, 0x94, 0x07, 0x71, 0x0b, 0x36, 0x5e,
	0xe8, 0xa9, 0xc5, 0x18, 0x4d, 0xa6, 0xe6, 0x06, 0x69, 0x1b, 0x6a, 0x03, 0x7c, 0x1d, 0x1e, 0x6e,
	0xc5, 0xbe, 0x14, 0x1b, 0xb0, 0x1e, 0xa3, 0x4c, 0x62, 0x7c, 0xe5, 0xd0, 0x58, 0xd1, 0x84, 0xc6,
	0x61, 0x9a, 0xd9, 0xe5, 0xde, 0xbb, 0x3a, 0x34, 0x87, 0x65, 0x12, 0x74, 0x07, 0x5a, 0xde, 0x33,
	0x50, 0x4f, 0x0f, 0x68, 0xbb, 0x97, 0xe0, 0xa2, 0x77, 0x09, 0xe9, 0x40, 0xb8, 0x09, 0xa3, 0x8b,
	0x88, 0xee, 0x40, 0xdd, 0x8b, 0x15, 0xbe, 0xfa, 0x71, 0xce, 0x08, 0xdd, 0x05, 0xf0, 0x86, 0xc7,
	0xce, 0x3a, 0x8d, 0x55, 0xc4, 0xa9, 0x27, 0xf6, 0xa1, 0xed, 0x0d, 0x07, 0xce, 0x58, 0x95, 0xc6,
	0x68, 0x9d, 0x9e, 0x57, 0x70, 0x9b, 0xbe, 0xd3, 0xa7, 0x9f, 0xec, 0x4f, 0xba, 0xf7, 0x60, 0x33,
	0x3c, 0xa1, 0xb4, 0xc6, 0xb1, 0x95, 0xa3, 0x59, 0x65, 0xe7, 0xb7, 0xbe, 0xf3, 0x5e, 0x39, 0xeb,
	0x91, 0xc6, 0xd9, 0x34, 0xad, 0x22, 0x4e, 0x72, 0x46, 0x76, 0x09, 0xbd, 0x03, 0x8d, 0x10, 0x3f,
	0xbd, 0x24, 0x76, 0x68, 0xa8, 0x57, 0xd6, 0x22, 0x5a, 0x7e, 0xc8, 0x0f, 0xbe, 0xcd, 0x7d, 0x58,
	0x0f, 0xd2, 0x45, 0x26, 0x95, 0xe0, 0xe9, 0x6f, 0xf0, 0x36, 0x40, 0x90, 0xf6, 0xcd, 0x72, 0x3e,
	0x5e, 0xe1, 0xca, 0x3a, 0x6c, 0x55, 0xd4, 0xdf, 0xe7, 0x8c, 0x74, 0x09, 0x7d, 0x00, 0xd7, 0x82,
	0xfb, 0x08, 0xf5, 0x40, 0x25, 0xff, 0x38, 0xe0, 0xc7, 0x9c, 0x91, 0x47, 0xdb, 0x67, 0xe7, 0x3c,
	0xfa, 0x72, 0xce, 0xa3, 0xe3, 0x82, 0x93, 0xcf, 0x05, 0x27, 0x67, 0x05, 0x27, 0x5f, 0x0b, 0x4e,
	0xbe, 0x17, 0x3c, 0xfa, 0x51, 0x70, 0x72, 0xf2, 0x8d, 0x47, 0xa3, 0xab, 0xe1, 0x8f, 0xb8, 0xfb,
	0x2b, 0x00, 0x00, 0xff, 0xff, 0x98, 0x61, 0xf9, 0x0b, 0x51, 0x03, 0x00, 0x00,
}
