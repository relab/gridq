syntax = "proto3";

import "github.com/relab/gorums/gorums.proto";

// Package dev provides a blueprint for testing the various call semantics provided by Gorums.
// The following table explains the differences in call semantics.
//
//                    Replies per server      Gorums termination check    # times qfunc can update result     Server-side reply type      
// ------------------------------------------------------------------------------------------------------------------------------------------------
// Quorum call                 1                   Reply + error count                 1                           Single response 
// Correctable QC              1                   Reply + error count                 N                           Single response 
// Correctable QC w/prelim     M                   Error count                         M                           Stream of responses
package dev;

service Storage {
	// ReadNoQC is a plain gRPC call.
	rpc ReadNoQC(ReadRequest) returns (State) {}

	// Read is a synchronous quorum call.
	rpc Read(ReadRequest) returns (State) {
		option (gorums.qc) = true;
	}

	// ReadFuture is an asynchronous quorum call that 
	// returns a future object for retrieving results.
	rpc ReadFuture(ReadRequest) returns (State) {
		option (gorums.qc_future) = true;
	}

	// ReadCustomReturn is a synchronous quorum call with a custom return type
	rpc ReadCustomReturn(ReadRequest) returns (State) {
		option (gorums.qc) 			= true;
		option (gorums.custom_return_type) 	= "MyState";
	}

	// ReadCorrectable is an asynchronous correctable quorum call that 
	// returns a correctable object for retrieving results.
	// TODO update DOC (useful for EPaxos)
	rpc ReadCorrectable(ReadRequest) returns (State) {
		option (gorums.correctable) = true;
	}

	// ReadPrelim is an asynchronous correctable quorum call that 
	// returns a correctable object for retrieving results.
	// TODO update DOC
	rpc ReadPrelim(ReadRequest) returns (stream State) {
		option (gorums.correctable_pr) = true;
	}

	// Write is a synchronous quorum call.
	// The request argument (State) is passed to the associated
	// quorum function, WriteQF, for this method.
	rpc Write(State) returns (WriteResponse) {
		option (gorums.qc)		= true;
		option (gorums.qf_with_req)	= true;
	}

	// WriteFuture is an asynchronous quorum call that 
	// returns a future object for retrieving results.
	// The request argument (State) is passed to the associated
	// quorum function, WriteFutureQF, for this method.
	rpc WriteFuture(State) returns (WriteResponse) {
		option (gorums.qc_future)	= true;
		option (gorums.qf_with_req)	= true;
	}

	// WriteAsync is an asynchronous multicast to all nodes in a configuration.
	// No replies are collected.
	rpc WriteAsync(stream State) returns (Empty) {
		option (gorums.multicast) = true;
	}

	// WritePerNode is a synchronous quorum call, where,
	// for each node, a provided function is called to determine
	// the argument to be sent to that node.
	rpc WritePerNode(State) returns (WriteResponse) {
		option (gorums.qc)		= true;
		option (gorums.per_node_arg) 	= true;
	}
}

message State {
	string Value 	= 1;
	int64 Timestamp = 2;
}

message MyState {
	string Value 	= 1;
	int64 Timestamp = 2;
	int64 Extra 	= 3;
}

message WriteResponse {
	bool New = 1;
}

message ReadRequest {}

message Empty {}
