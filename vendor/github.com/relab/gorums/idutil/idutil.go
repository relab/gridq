package idutil

import (
	"hash/fnv"
	"net"
)

var h = fnv.New32a()

// IDFromAddress generates an id for the given TCP address using the same
// method as the gorums Manager type uses for generating its global node
// identifiers. The id is generated by resolving the TCP address and hashing
// the "ip:port" combination using 32-bit FNV-1.
func IDFromAddress(addr string) (uint32, error) {
	tcpAddr, err := net.ResolveTCPAddr("tcp", addr)
	if err != nil {
		return 0, err
	}
	_, _ = h.Write([]byte(tcpAddr.String()))
	id := h.Sum32()
	h.Reset()
	return id, nil
}

// IDFromHostPort generates an id for the given TCP address using the same
// method as the gorums Manager type uses for generating its global node
// identifiers. The id is generated by resolving the TCP address and hashing
// the "ip:port" combination using 32-bit FNV-1.
func IDFromHostPort(host, port string) (uint32, error) {
	addr := net.JoinHostPort(host, port)
	return IDFromAddress(addr)
}
