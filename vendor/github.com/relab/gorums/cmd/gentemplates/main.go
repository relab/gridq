package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"os"
	"path"
	"path/filepath"
	"strings"
)

func main() {
	var (
		in      = flag.String("in", "dev", "input directory containing .tmpl files")
		out     = flag.String("out", "plugins/gorums", "output directory for templates formated as Go string consts")
		verbose = flag.Bool("v", false, "verbose output")
	)

	flag.Usage = func() {
		fmt.Fprintf(os.Stderr, "Usage: %s [OPTIONS]\n", os.Args[0])
		fmt.Fprintf(os.Stderr, "\nOptions:\n")
		flag.PrintDefaults()
	}
	flag.Parse()

	log.SetPrefix("gentemplates: ")
	log.SetFlags(0)
	if !*verbose {
		log.SetOutput(ioutil.Discard)
	}

	var b bytes.Buffer
	var templates []string

	// visit generates a _gen.go file if the supplied path is an .tmpl
	// file.
	visit := func(fpath string, f os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		if !strings.HasSuffix(fpath, ".tmpl") {
			return nil
		}
		templateData, err := ioutil.ReadFile(fpath)
		if err != nil {
			return err
		}

		_, fname := path.Split(fpath)
		templateName := strings.Replace(fname, ".", "_", 1)
		templates = append(templates, templateName)

		b.WriteString("const " + templateName + " = `")
		_, err = b.Write(templateData)
		if err != nil {
			return err
		}
		b.WriteString("`\n\n")

		return nil
	}

	b.WriteString("// Code generated by github.com/relab/gorums/cmd/gentemplates. DO NOT EDIT.\n")
	b.WriteString("// Template source files to edit is in the '" + *in + "' folder.\n\n")
	b.WriteString("package gorums\n\n")

	err := filepath.Walk(*in, visit)
	if err != nil {
		log.Fatal(err)
	}

	b.WriteString("var templates = map[string]string{\n")
	for _, s := range templates {
		b.WriteString("\"")
		b.WriteString(s)
		b.WriteString("\": ")
		b.WriteString(s)
		b.WriteString(",\n")
	}
	b.WriteString("}\n")

	outData, err := format.Source(b.Bytes())
	if err != nil {
		log.Fatalf("error formating code: %v", err)
	}

	outPath := filepath.Join(*out, "templates.go")
	if err = ioutil.WriteFile(outPath, outData, 0644); err != nil {
		log.Fatalf("error writing: %v", err)
	}
}
